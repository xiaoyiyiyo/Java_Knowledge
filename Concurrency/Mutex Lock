标准的互斥锁：
每次最多只有一个线程能持有锁，也是独占锁的概念。读/读，写/写，写/读操作都不能同时发生。
比如 内置锁：
java提供内置的锁机制为同步代码块(synchronized block), 同步代码块包括两个部分： 
1.作为锁的对象引用 2. 作为由这个锁保护的代码块。
synchronized(object){
}
每个java对象都可以用做一个实现同步的锁，这些锁即被成为内置锁或监视器锁。
注意：并不能认为同步代码块或关键字synchronized只能用于实现原子性或者确定临界区，其还可用于另外一个重要方面：内存可见性, 如下：
//NotThreadSafe
public class MutableInteger{
  private int value;
  public int get(){return value;}
  public void set(int value){this.value=value;}
}
可对get和set方法进行同步(synchronized),使之成为线程安全类。

===================================================================================

ReentrantLock(重入锁):
Java5.0增加的一种锁机制，其并不是一种替代内置锁的方法，而是当内置锁不适用时，可供选择的高级方式。
基本语法上, ReentrantLock 与 synchronized 很相似, 它们都具备一样的线程重入特性，只是代码写法上有点区别而已，一个表现为 API 层面的互斥锁（Lock），
一个表现为原生语法层面的互斥锁（synchronized）。
基本形式:
Lock lock = new ReentrantLock();
...
lock.lock();
try{
  //do some action
} finally {
  lock.unlock();
}
高级功能：
1. 可定时 2. 可轮询 3. 可中断 4. 公平队列 5. 非块结构加锁
举例: 带有时间限制的加锁
public boolean trySendOnSharedLine(String message, long timeout, TimeUnit unit)
  throw InterruptedException{
  long nanosToLock = unit.toNanos(timeout) - estimatedNanosToSend(message);
  if(!lock.tryLock(nanosToLock, NANOSECONDS))     //可定时
    return false;
  try{
    return sendOnSharedLine(message);
  } finally {
    lock.unlock();
  }
}
当需要这些高级功能的时候才应该使用ReentrantLock, 否则，应该优先使用synchronized，毕竟内置锁为开发人员所熟悉，简单紧凑，而且未来也更可能会对
synchronized进行性能提升。

===================================================================================

ReentrantReadWriteLock(读写锁) :
首先ReentrantReadWriteLock与ReentrantLock彼此之间没有继承或实现的关系。ReentrantReadWriteLock实现ReadWriteLock接口，ReadWriteLock并不是
Lock的子接口，它只是借助Lock来实现读写两个视角，即
public interface ReadWriteLock{
  Lock readLock();  //共享锁
  Lock writeLock(); //独占锁
}
且ReentrantReadWriteLock描述的是 一个资源能够被多个读线程访问，或者被一个写线程访问，但是不能同时存在读写线程。并不是独占锁。
几个有趣的特性：
1. 重入性   
  "读-读"不互斥  
  "读-写"互斥
  "写-写"互斥 
  写线程获取写入锁后可以再次获取读取锁， 但读线程获取读取锁后不能再获取写入锁
2. 锁降级
  与重入性最后一句原理相通，即写线程获取写入锁后可以获取读取锁，然后释放写入锁，这样从写入锁降级变成了读取锁。
  原因可能为：如果在释放写锁后，在得到读锁前，有可能被其他线程打断
  没有锁升级，读取锁不能直接升级为写入锁的，因为获取一个写锁需要释放所有读锁，如果有两个读锁获取了写入锁，而又不全部释放读锁会造成死锁。
读写锁适用于读取操作多的应用。 


注：
重入: 一个线程允许获得已经由它自己持有的锁。
重入意味着获取锁的操作粒度是“线程”，而不是“调用”(pthread互斥体(POSIX线程)的获取操作是以“调用”为粒度的)。

公平/不公平锁
synchronized与默认的ReentrantLock,ReentrantReadWriteLock一样是非公平锁，而ReentrantLock,ReentrantReadWriteLock的构造函数中提供了公平性的选择。
