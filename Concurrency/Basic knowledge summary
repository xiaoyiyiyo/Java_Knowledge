                                                                                   +--->  管道 pipeline
                                                                                   |
       +--> 架构层面                                                                +--->  信号 signal
       |                                                                           |
高并发                             +----> 线程安全 +---> 线程同步 +---> 线 程 通 信   +--->  消息队列 messsage queue
       |                          |                                                |                               +--->  可见性
       +--> 代码层面  +---> 多线程  +----> 性能                                      +--->  共享内存 shared memory   |
                                  |                                                |                               +--->  有序性
                                  +----> 活跃性                                     +--->  信号量 semaphore
                                  |                                                |
                                  +----> ...                                       +--->  套接字 socket
                                  
加上复合操作的原子性，多线程安全问题的主要关注点：
1. 原子性
2. 可见性 
3. 有序性

=======================================================================================

原子性：
问题： 多个操作由于不恰当的执行时序而出现不正确的结果，即存在 竞态条件(Race Condition) 也遇到了某种不恰当的执行时序。
      常见的竞态条件类型：“读取-修改-写入” 如：++count 
                        “先检查后执行(Check-Then-Act)”, 常见情况为：延迟初始化 getInstance()
java解决原子性的问题主要通过锁/互斥实现。
锁机制： 
锁的本质是等待，等待的方式有两种
1. 线程阻塞   (被唤醒的代价比较高,保存用户态的上下文进入内核态，即上下文切换)      互斥锁
2. 线程自旋   (持续执行空代码,白白消耗资源)                                     自旋锁
java自带的sychronized采取的是折中的方案, 先自旋一段时间，还没拿到锁就进入阻塞(混合型互斥锁)
无锁概念：
相对于独占锁的悲观技术，其采用一种乐观的方法，借助冲突检测机制来判断在更新过程中是否存在其它线程的干扰，如果存在，则失败，并可以重试(
也可以不重试)。冲突检测机制普遍采用的是比较并交换(CAS)，提到无锁，基本上就指向CAS的概念。
java5.0后在int, long和对象的引用等类型上都公开了CAS操作(原子变量类 java.util.concurrent.atomic中的 AtomicXxx)，JVM把它们编译为相应的机器指令，
所以是高效的。

=======================================================================================

可见性：
可见性指的是一个线程对变量的写操作对其他线程后续的读操作可见。
可见性问题的根源 -- CPU写操作的延迟  -- CPU的操作都基于高速缓存的，而线程通信是基于内存的，故存在延迟。
保证可见性手段： valatile, synchronized, 显式锁，原子变量等同步手段.其中当把变量声明为volatile类型后，编译器在运行时会注意到这个变量是共享的，
不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或其他处理器不可见的地方，因此volatile的变量总会返回最新写入的值。
典型用法：
volatile boolean asleep;
...
while(!asleep)
  countSomeSheep();

=======================================================================================

有序性:
有序性指的是数据不相关的变量(没有数据流依赖性) 在并发的情况下，实际执行的结果和单线程的执行结果是一样的，不会因为重排序的问题导致结果不可预知。 
volatile, final, synchronized，显式锁都可以保证有序性 。 
有序性的语意有几层，
1. 最常见的就是保证多线程执行的串行顺序 
2. 防止重排序引起的问题
3. 程序执行的先后顺序，比如JMM定义的一些Happens-before规则
可涉及到编译级别、指令级级别、内存系统级别的重排序。主要针对内存系统级别描述下：
java内存模型(JMM)为所有操作定义了一个偏序关系，即Happens-Before。
Happens-Before的规则：
1. 程序顺序规则 2. 监视器锁规则 3. volatile变量规则 4. 线程启动规则 5. 线程结束规则 6. 中断规则 7. 终结器规则 8. 传递性
监视器锁规则：解锁须在同一锁上的加锁操作之前执行
volatile变量规则：对volatile变量的写入须在对该变量的读操作之前执行。
public class PossibleReordering {
	static int x = 0, y =0;
	static int a = 0, b = 0;
	public static void main(String[] args) throws InterruptedException {
		Thread one = new Thread(new Runnable(){
			@Override
			public void run() {
				a = 1;  x = b;
			}
		});
		Thread other = new Thread(new Runnable(){
			@Override
			public void run() {
				b = 1;  y = a;
			}
		});
		one.start(); other.start();
		one.join();  other.join();
		System.out.println(x + "     "+y);
	}
}
资料上有说上段程序还可以输出 0   0, 因为每个程序中的各个操作之间不存在数据流依赖性，因此可以乱序执行(即使顺序执行，
也存在缓存刷新到主内存的延迟导致的可能。)
                     +---------+                                   +------+
Thread-A   +------>  |x = b(0) | +-------------------------------> |a = 1 |
                     +---------+                                   +------+

                                    +------+       +--------+
Thread-B   +--------------------->  | b = 1| +---> |y = a(0)|
                                    +------+       +--------+
可借助同步手段进行限制重排序。

=======================================================================================


几个有趣的设计思路或技术：
1. 不可变对象
2. 线程封闭
3. 双重检查锁定
4. CopyOnWrite容器

线程封闭常用的包括 1. 栈封闭 2. ThreadLocal 

双重检查锁定：
如果出于性能考虑需要对静态域使用延迟初始化，就使用Lazy initialization holder class模式。
private static class FieldHolder{
  static final FieldType field = computeFieldValue();
}
static FieldType getField(){return FieldHolder.field;}
如果出于性能的考虑需要对实例域使用延迟初始化，就使用双重检查模式。
private volatile FiledType filed;  // volatile
FieldType getField(){
  FieldType result = field;
  if(result == null){
    synchronized(this){
    	result = field;
	if(result == null)
	   field = result = computeFieldValue();
    }
  }
  return result;
}
